<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script src="cal126.js"  type='application/javascript'></script>

<style type="text/css">
    label { color: #2067b0; font-weight: bold; }
    .calendar_container {-moz-user-select: none; -khtml-user-select: none; -webkit-user-select: none; -o-user-select: none; }
	#plus_range, #clear_range { float:left; padding:5px; border: 1px solid #b7b7b7; border-top:0px; width: 20px; text-align:center; cursor:pointer; border-left:0px;}
	#plus_range { border-left: 1px solid #b7b7b7; }
	#ranges_list { width: 400px; clear:both;}
	.range_item { padding: 10px; border: 1px solid #b7b7b7; border-top:0px;}
	.range_label { width: 350px; float: left; }
	.range_item:nth-child(1){ border-top: 1px solid #b7b7b7; }
	.kill_range { float:right; cursor:pointer;  }
	#ranges_top {  padding-right:70px; margin-bottom:40px;}
	.cal_day { background-color: #F1F1F1; border: 1px solid lightgrey; height: 30px; text-align: center; width: 30px; cursor:pointer;}
	.cal_day_selected { background-color: #5195DF; color: white; }
</style>

<div id='ranges_top'>
	<div id='ranges_list'></div>
	<div id='plus_range'>+</div>
	<div id='clear_range'>clr</div>
</div>

<script type='application/javascript'>

var DateHelper = function(){
	var _self = this;

    /*    Some hacks for working with Date objects.    */
	
	_self.compareDates = function(d1, d2){
		if(d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate()){
			return true
		}
		return false;
	};
	
    _self.changeDate = function(d, days){
    	if(d === undefined){
    		return false;
    	}
    	var dmod = Math.abs(days);
		var millisecondOffset = dmod * 24 * 60 * 60 * 1000;
		var new_date = 0;

		if(days < 0){
			new_date = d.getTime() - millisecondOffset;
		} else {
			new_date = d.getTime() + millisecondOffset;
		}

		// Ok here		
		var tmp = new Date();
		tmp.setTime(new_date);

		return tmp;
    };
};


var Range = function(){
    var _self = this;

	_self.template = "\
	<div class='range_item range_item%id%' data-id='%id%'>\
		<label class='range_label'>Range %id%</label><div class='kill_range'>x</div>\
		<div class='calendar_container'><table>\
		<thead>\
		<tr><td colspan=7><span class='prev_m'>&lt;&lt;&lt;</span> %year% <span class='next_m'>&gt;&gt;&gt;</span></td></tr>\
		<tr><td>M</td><td>T</td><td>W</td><td>T</td><td>F</td><td>S</td><td>S</td></tr>\
		</thead>\
		<tbody>%calendar%</tbody></table></div>\
	</div>";

    _self.id = 0;
    _self.daylist = [];
    
    _self.cal = null;

    _self.init = function(id){
        _self.id = id;
        _self.cal = new Cal126();
    };
    
    _self.add_day = function(d){
    	// Search for dup
    	// _self.remove_day(d);
    	_self.daylist.push(d);
    	_self.fill_days();
    };
    _self.remove_day = function(d){
    	for (var i=0; i < _self.daylist.length; i++) {
            if( date_helper.compareDates(_self.daylist[i], d ) ){
            	_self.daylist.splice(i, 1);
            }
		};
    	_self.fill_days();
    };
    
    _self.day_exist = function(d){
    	for (var i=0; i < _self.daylist.length; i++) {
            if( date_helper.compareDates(_self.daylist[i], d ) ) {
            	return true;
            }
		};
		return false;
    };
    
    _self.first_day = function(){
    	var x = 42 * 9999999999999999;
    	var first = false;
    	for (var i=0; i < _self.daylist.length; i++) {
            if( _self.daylist[i].getTime() < x ) {
				x = _self.daylist[i].getTime();
            	first = _self.daylist[i];
            }
		};
		return first;
    };
    
    _self.last_day = function(){
    	var x = 42; // 0
    	var last = false;
    	for (var i=0; i < _self.daylist.length; i++) {
            if( _self.daylist[i].getTime() > x ) {
				x = _self.daylist[i].getTime();
            	last = _self.daylist[i];
            }
		};
		return last;
    };
    
    _self.fill_days = function(){
    	var first = _self.first_day();
    	var last = _self.last_day();
    	if(first == false || last == false ||   date_helper.compareDates(first, last)){
    		return false;
    	}

    	var next = date_helper.changeDate(first, 1);
    	while(date_helper.compareDates(first, last) == false && next.getTime() < last.getTime()){
	    	if(_self.day_exist(next) == false){
	    		_self.daylist.push(next);
	    	}

	    	var next = date_helper.changeDate(next, 1);
    	}
    	
    };
    
    _self.switch_to_prev_month = function(){
    	var m = _self.cal.month();
    	var y = _self.cal.year();
    	if( m == 0 ){
    		m = 11;
    		y -= 1;
    	} else {
    		m -= 1;
    	}
		
		// Probably ok    	
    	_self.cal.set_date(new Date(y, m, 1));
    };
    
    _self.switch_to_next_month = function(){
    	var m = _self.cal.month();
    	var y = _self.cal.year();
    	if( m == 11 ){
    		m = 1;
    		y += 1;
    	} else {
    		m += 1;
    	}
    	
		// Probably ok    	
    	_self.cal.set_date(new Date(y, m, 1));
    };
    
    _self.build_calendar = function(){
    	var w = _self.cal.cal(_self.cal.working_date);

    	var week_tpl = '<tr>%week%</tr>';
    	var day_tpl = '<td class="cal_day %extraclass%" data-month="%month%" data-year="%year%" data-day="%day%">%day%</td>';
    	var result = '';
    	
    	for (var i=0; i < w.length; i++) {
    		var week_tmp = '';
    		for (var d=0; d < w[i].length; d++) {
    			if ( w[i][d] == 0 ){
    				w[i][d] = '';
    			}
    			
    			var cal_day_selected = _self.day_exist(new Date(_self.cal.year(), _self.cal.month(), w[i][d]));

    			var cal_day_selected_class = '';
    			if(cal_day_selected && w[i][d]){
    				cal_day_selected_class = 'cal_day_selected';
    			}
    			
		        week_tmp += day_tpl
		        	.replace(/%extraclass%/g, cal_day_selected_class)
		        	.replace(/%day%/g, w[i][d])
		        	.replace(/%month%/g, _self.cal.month())
		        	.replace(/%year%/g, _self.cal.year());
			};
			result += week_tpl.replace(/%week%/g, week_tmp);
		};
		return result;
    };
    
    _self.build = function(){
    	var cal = _self.build_calendar();

    	return _self.template
    		.replace(/%id%/g, _self.id)
    		.replace(/%year%/g, _self.cal.get_month_name() + " " + _self.cal.year() )
    		.replace(/%calendar%/g, cal)
    		.replace(/%from%/g, _self.from)
    		.replace(/%to%/g, _self.to);
    };
};



var Ranger = function(){
    var _self = this;

    // id: Range{}
    _self.ranges = {};

	_self.clear = function(){
	    _self.ranges = {};
		_self.add();	
	};

    _self.init = function(){
        //
        $('#plus_range').on('click', _self.add);
        $('#clear_range').on('click', _self.clear);
        
        $(document).on('click', '.kill_range', _self.remove);
        
        $(document).on('click', '.cal_day', _self.dayChoosed);

        $(document).on('click', '.next_m', _self.getNextM);
        $(document).on('click', '.prev_m', _self.getPrevM);
        
        

    };
    
    _self.getNextM = function(){
        // Switch calendar to next month
    	var id = $(this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode).data('id');
    	_self.ranges[id].switch_to_next_month();
    	_self.draw();
    };

    _self.getPrevM = function(){
        // Switch calendar to previous month
    	var id = $(this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode).data('id');
    	_self.ranges[id].switch_to_prev_month();
    	_self.draw();
    };
    
    _self.dayChoosed = function(){
        // On day ckicked
    	var has = $(this).hasClass('cal_day_selected');
    	var id = $(this.parentNode.parentNode.parentNode.parentNode.parentNode).data('id');

		var day = $(this).data('day');
		var month = $(this).data('month');
		var year = $(this).data('year');
		
		var d = new Date(year, month, day);

    	if(has){
			_self.ranges[id].remove_day(d);
    	} else {
			_self.ranges[id].add_day(d);
    	}
    	
    	_self.draw();
    };
    
    _self.getNext = function(id){
        // Get next avaliable id
    	while( id < 1000 ){
    		id += 1;
    		if( id in _self.ranges){
    			return id;
    		}
    	}
    	return false;
    };

    _self.getPrev = function(id){
        // Get previous avaliable id
    	while( id > 0 ){
    		id -= 1;
    		if( id in _self.ranges){
    			return id;
    		}
    	}
    	return false;
    };
    
    
    _self.remove = function(){
        // On close button
    	delete _self.ranges[$(this.parentNode).data('id')];
    	_self.draw();
    };
    
    _self.add = function(){
        // Add new range element

        var freeid = _self.getNextId();
        var r = new Range(freeid);        
        
        r.init(freeid);
        r.cal.set_date(new Date());
        _self.ranges[freeid] = r;

        _self.draw();
    };

    _self.draw = function(){
        var list_container = document.getElementById('ranges_list')
        list_container.innerHTML = '';
        var html = '';

        for ( z in _self.ranges ){
        	html +=  _self.ranges[z].build();
        }        

        list_container.innerHTML = html;
    };

    _self.getNextId = function(){
        // Search for free id
        var freeid = 0
        for (var z in _self.ranges) {
			z = parseInt(z, 10);
            if(z > freeid){
                freeid = z;
            }
        };
        return freeid + 1;
    };
    
};

var date_helper = new DateHelper();
var ranges_manager = new Ranger();
ranges_manager.init();
ranges_manager.add();
ranges_manager.draw();


</script>
